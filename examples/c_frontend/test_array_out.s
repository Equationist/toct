; Generated by CompilerKit
; Target: 64-bit

.section __TEXT,__text,regular,pure_instructions

.globl _main
.p2align 2
_main:
.cfi_startproc
	str x29, [sp, #-16]!	; save FP and LR with pre-decrement
	str x30, [sp, #8]
	mov x29, sp	; set up frame pointer
	sub sp, sp, #64	; allocate 64 bytes
.Lmain_entry:
	mov w0, wzr	; load zero
	add x1, x2, w0	; address calculation (may be folded)
	ldrw w3, [x1]	; load word
	mov w4, #10	; load constant 10
	mov w5, wzr	; load zero
	add x6, x2, w5	; address calculation (may be folded)
	strb w4, [x6]	; store byte
	mov w7, #1	; load constant 1
	add x8, x2, w7	; address calculation (may be folded)
	ldrw w9, [x8]	; load word
	mov w10, #20	; load constant 20
	mov w11, #1	; load constant 1
	add x12, x2, w11	; address calculation (may be folded)
	strb w10, [x12]	; store byte
	mov w13, #2	; load constant 2
	add x14, x2, w13	; address calculation (may be folded)
	ldrw w15, [x14]	; load word
	mov w16, wzr	; load zero
	add x17, x2, w16	; address calculation (may be folded)
	ldrw w18, [x17]	; load word
	mov w19, #1	; load constant 1
	add x20, x2, w19	; address calculation (may be folded)
	ldrw w21, [x20]	; load word
	add w22, w18, w21	; add
	mov w23, #2	; load constant 2
	add x24, x2, w23	; address calculation (may be folded)
	strb w22, [x24]	; store byte
	mov w25, #2	; load constant 2
	add x26, x2, w25	; address calculation (may be folded)
	ldrw w27, [x26]	; load word
	mov w0, w27	; return value
	mov sp, x29	; restore stack pointer
	ldr x29, [sp], #16	; restore FP and LR with post-increment
	ldr x30, [sp, #-8]
	ret	; return
.cfi_endproc
